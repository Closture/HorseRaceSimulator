
public class Horse {
    private String name;
    private char symbol;
    private int distanceTravelled;
    private boolean fallen;
    private double confidence;

    // The constructor
    public Horse(char horseSymbol, String horseName, double horseConfidence) {
        this.name = horseName;
        this.symbol = horseSymbol;
        this.distanceTravelled = 0;
        this.fallen = false;
        if (horseConfidence < 0) {
            this.confidence = 0;
        } else if (horseConfidence > 1) {
            this.confidence = 1;
        } else {
            this.confidence = horseConfidence;
        }
    }
    
    // Accessor methods
    public double getConfidence() {
        return confidence;
    }

    public int getDistanceTravelled() {
        return distanceTravelled;
    }

    public String getName() {
        return name;
    }

    public char getSymbol() {
        return symbol;
    }

    public boolean hasFallen() {
        return fallen;
    }

    // Mutator methods
    public void fall() {
        fallen = true;
    }

    public void goBackToStart() {
        distanceTravelled = 0;
        fallen = false;
    }

    public void moveForward() {
        distanceTravelled++;
    }

    public void setConfidence(double newConfidence) {
        // Check if confidence is within the acceptable range (0 to 1)
        if (newConfidence < 0) {
            confidence = 0;
        } else if (newConfidence > 1) {
            confidence = 1;
        } else {
            confidence = newConfidence;
        }
    }

    public void setSymbol(char newSymbol) {
        symbol = newSymbol;
    }
}


import java.util.concurrent.TimeUnit;
import java.lang.Math;

/**
 * A three-horse race, each horse running in its own lane
 * for a given distance
 * 
 * @author McFarewell
 * @version 1.1
 */
public class Race {
    private int raceLength;
    private Horse lane1Horse;
    private Horse lane2Horse;
    private Horse lane3Horse;

    /**
     * Constructor for objects of class Race
     * Initially there are no horses in the lanes
     * 
     * @param distance the length of the racetrack (in metres/yards...)
     */
    public Race(int distance) {
        // initialise instance variables
        raceLength = distance;
        lane1Horse = null;
        lane2Horse = null;
        lane3Horse = null;
    }
    
    /**
     * Adds a horse to the race in a given lane
     * 
     * @param theHorse the horse to be added to the race
     * @param laneNumber the lane that the horse will be added to
     */
    public void addHorse(Horse theHorse, int laneNumber) {
        switch (laneNumber) {
            case 1:
                lane1Horse = theHorse;
                break;
            case 2:
                lane2Horse = theHorse;
                break;
            case 3:
                lane3Horse = theHorse;
                break;
            default:
                System.out.println("Cannot add horse to lane " + laneNumber + " because there is no such lane");
        }
    }
    
    /**
     * Start the race
     * The horse are brought to the start and
     * then repeatedly moved forward until the 
     * race is finished
     */
    public void startRace() {
        // reset all the lanes (all horses not fallen and back to 0)
        lane1Horse.goBackToStart();
        lane2Horse.goBackToStart();
        lane3Horse.goBackToStart();
                      
        while (true) {
            // move each horse
            moveHorse(lane1Horse);
            moveHorse(lane2Horse);
            moveHorse(lane3Horse);
                        
            // print the race positions
            printRace();
            
            // if any of the three horses has won, break the loop
            if (raceWonBy(lane1Horse) || raceWonBy(lane2Horse) || raceWonBy(lane3Horse)) {
                break;
            }
           
            // wait for 100 milliseconds
            try { 
                TimeUnit.MILLISECONDS.sleep(100);
            } catch(Exception e) {}
        }
        
        // Determine the winning horse and display its name
        Horse winner = lane1Horse;
        if (raceWonBy(lane2Horse)) {
            winner = lane2Horse;
        } else if (raceWonBy(lane3Horse)) {
            winner = lane3Horse;
        }
        System.out.println("And the winner is " + winner.getName());
    }
    
    /**
     * Randomly make a 
     * horse move forward or fall depending
     * on its confidence rating
     * A fallen horse cannot move
     * 
     * @param theHorse the horse to be moved
     */
    private void moveHorse(Horse theHorse) {
        // if the horse has fallen it cannot move, so only run if it has not fallen
        if (!theHorse.hasFallen()) {
            // the probability that the horse will move forward depends on the confidence
            if (Math.random() < theHorse.getConfidence()) {
               theHorse.moveForward();
            }
            
            // the probability that the horse will fall is very small (max is 0.1)
            // but will also depend exponentially on confidence 
            // so if you double the confidence, the probability that it will fall is *2
            if (Math.random() < (0.1 * theHorse.getConfidence() * theHorse.getConfidence())) {
                theHorse.fall();
            }
        }
    }
        
    /** 
     * Determines if a horse has won the race
     *
     * @param theHorse The horse we are testing
     * @return true if the horse has won, false otherwise.
     */
    private boolean raceWonBy(Horse theHorse) {
        return theHorse.getDistanceTravelled() >= raceLength;
    }
    
    /***
     * Print the race on the terminal
     */
    private void printRace() {
        System.out.print('\u000C');  // clear the terminal window
        
        multiplePrint('=', raceLength + 3); // top edge of track
        System.out.println();
        
        printLane(lane1Horse);
        System.out.println();
        
        printLane(lane2Horse);
        System.out.println();
        
        printLane(lane3Horse);
        System.out.println();
        
        multiplePrint('=', raceLength + 3); // bottom edge of track
        System.out.println();    
    }
    
    /**
     * print a horse's lane during the race
     * for example
     * |           X                      |
     * to show how far the horse has run
     */
    private void printLane(Horse theHorse) {
        // calculate how many spaces are needed before and after the horse
        int spacesBefore = theHorse.getDistanceTravelled();
        int spacesAfter = raceLength - theHorse.getDistanceTravelled();
        
        // print a | for the beginning of the lane
        System.out.print('|');
        
        // print the spaces before the horse
        multiplePrint(' ', spacesBefore);
        
        // if the horse has fallen then print dead, else print the horse's symbol
        if(theHorse.hasFallen()) {
            System.out.print('\u2322');
        } else {
            System.out.print(theHorse.getSymbol());
        }
        
        // print the spaces after the horse
        multiplePrint(' ', spacesAfter);
        
        // print the | for the end of the track
        System.out.print('|');
    }
        
    
    /***
     * print a character a given number of times.
     * e.g. printmany('x',5) will print: xxxxx
     * 
     * @param aChar the character to Print
     */
    private void multiplePrint(char aChar, int times) {
        for (int i = 0; i < times; i++) {
            System.out.print(aChar);
        }
    }
}


public class Main {
    public static void main(String[] args) {
        // Create a Race object with a race length of x metres
        Race race = new Race(20);
        
        // Create Horse objects and add them to the race
        Horse horse1 = new Horse('♘', "PIPPI LONGSTOCKING", 0.3);
        Horse horse2 = new Horse('♞', "KOKOMO", 0.2);
        Horse horse3 = new Horse('♞', "EL JEFE", 0.4);        


        race.addHorse(horse1, 1); // Add horse1 to lane 1
        race.addHorse(horse2, 2); // Add horse2 to lane 2
        race.addHorse(horse3, 3); // Add horse3 to lane 3
        
        // Start the race
        race.startRace();
    }
}
